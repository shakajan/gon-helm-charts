apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  serviceName: "kafka"
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
      - name: wait-for-zookeeper
        image: busybox
        command:
          - sh
          - -c
          - |
            until nc -z -v -w30 zookeeper 2181; do
              echo "Waiting for Zookeeper to start..."
              sleep 5
            done
      containers:
        - name: kafka
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: {{ .Values.kafka.containerPort }}
          resources:
            requests:
              memory: "1Gi"
              cpu: "1"
            limits:
              memory: "1Gi"
              cpu: "1"
          env:
            - name: KAFKA_BROKER_ID # 카프카의 브로커 아이디로 유일한 값, 1개의 브로커를 사용할 예정이라 없어도 문제 없음
              value: "{{ .Values.kafka.brokerId }}"
            - name: KAFKA_ZOOKEEPER_CONNECT # 주키퍼에 연결하기 위한 대상 지정 [서비스이름:컨테이너내부포트]
              value: {{ .Values.kafka.zookeeperConnect }} 
            - name: KAFKA_ADVERTISED_LISTENERS # 외부 클라이언트에 알려주는 리스너 주소
              value: {{ .Values.kafka.advertisedListeners }}
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP # 보안을 위한 프로토콜 매핑. PLAINTEXT는 암호화하지 않은 일반 평문
              value: {{ .Values.kafka.listenerSecurityProtocolMap }}
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR # 트랜잭션 최소 InSyncReplicas 설정 수
              value: "{{ .Values.kafka.transactionStateLog.minISR }}"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR # 트랜잭션 상태에서 복제 수
              value: "{{ .Values.kafka.transactionStateLog.replicationFactor }}"
            - name: TOPIC_AUTO_CREATE # 토픽 자동 생성 여부
              value: "{{ .Values.kafka.topicAutoCreate }}"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR # 토픽 복제에 대한 설정 값
              value: {{ .Values.kafka.offsetsTopicReplicationsFactor | quote }}
          volumeMounts:
            - name: kafka-data
              mountPath: "{{ .Values.persistence.mountPath }}"
  volumeClaimTemplates:
  - metadata:
      name: kafka-data  # PersistentVolumeClaim 이름
    spec:
      accessModes: [ "ReadWriteOnce" ]  # 단일 파드에서만 읽기/쓰기
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  ports:
    - port: 9092
      targetPort: 9092
  clusterIP: None
  selector:
    app: kafka

